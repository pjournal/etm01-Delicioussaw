install.packages("ISLR")
## Working Directory
getwd()
## Data Sets existing in base R installation
## Iris data
data(iris)
str(iris)
View(iris)
summary(iris)
class(iris)
dim(iris)
names(iris)
ncol(iris)
nrow(iris)
head(iris)
tail(iris)
iris[1:5,]
iris[1:10,2]
iris[1:10,"Sepal.Width"]
iris$Sepal.Width
iris$Sepal.Width[1:10]
summary(iris$Sepal.Length)
mean(iris$Sepal.Length)
summary(iris)
median(iris$Sepal.Length)
range(iris$Sepal.Length)
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
quantile(iris$Sepal.Length)
quantile(iris$Sepal.Length,c(0.1,0.4,0.7))
## Data Types
a=c(1,3,5)
a
print(a)
class(a)
b=c("Ali","Veli","Selami")
b
class(b)
c=c(1L,2L,3L)
c
class(c)
d=c(TRUE,FALSE,TRUE)
d
class(d)
b2=c("Low","Medium","High")
b2
class(b2)
b2=as.factor(b2)
b2
class(b2)
renk=c("sarý","kýrmýzý","mavi")
class(renk)
renk2=factor(c("sarý","kýrmýzý","mavi"))
class(renk2)
is.factor(renk)
is.factor(renk2)
renk=as.factor(renk)
class(renk)
renk
## Some charts
hist(iris$Sepal.Length)
plot(density(iris$Sepal.Length))
table(iris$Species)
pie(table(iris$Species))
barplot(table(iris$Species))
cov(iris$Sepal.Length,iris$Petal.Length)
cor(iris$Sepal.Length,iris$Petal.Length)
cov(iris[,1:4])
cor(iris[,1:4])
pairs(iris)
## useful info
history()
history(max.show=Inf)
iris
iris$Sepal.Height=iris$Sepal.Length+iris$Sepal.Width
iris$Sepal.Height
str(iris)
Petal.Height=iris$Petal.Length+iris$Petal.Width
iris=cbind(iris,Petal.Height)
str(iris)
##Classification and Regression Trees with "tree" package
install.packages("tree")
library(tree)
## Example 1 (Classification)
iris_tr=tree(Species~Petal.Length+Sepal.Width,data=iris)
View(iris_tr)
iris_tr=tree(Species~.,data=iris)
plot(iris_tr)
text(iris_tr,cex=0.8)
summary(iris_tr)
iris_tr
pred_ir=predict(iris_tr)
pred_ir
pred_ir=predict(iris_tr,type="class")
pred_ir
table(iris$Species,pred_ir)
library(MASS)
?tree
?MASS
??MASS
str(Boston)
iris_tr
summary(iris_tr)
pred_ir = predict(iris_tr)
pred_ir = predict(iris)
iris_tr=tree(Species~.,data=iris)
##Classification and Regression Trees with "tree" package
install.packages("tree")
library(tree)
## Example 1 (Classification)
iris_tr=tree(Species~Petal.Length+Sepal.Width,data=iris)
iris_tr=tree(Species~.,data=iris)
plot(iris_tr)
text(iris_tr,cex=0.8)
summary(iris_tr)
iris_tr
pred_ir=predict(iris_tr)
pred_ir
getwd()
setwd("C://Users//Mustafa Oguz Turkkan//Documents")
## Example 3 Classification
## reading from a file
bank=read.csv("UniversalBank.csv")
## Example 3 Classification
## reading from a file
bank=read.csv("UniversalBank.csv")
str(bank)
bt=tree(Personal.Loan~.,data=bank)
plot(bt)
text(bt,cex=0.8)
bt
## Changing the output attribute to a categorical attribute
bank$Personal.Loan=as.factor(bank$Personal.Loan)
str(bank)
## levels = 0 or 1 to levels = rejected or accepted
levels(bank$Personal.Loan)=c("rejected",'accepted')
## back to the original
levels(bank$Personal.Loan)=c('0','1')
str(bank)
## Obtaining training ve test sets, Method 1
set.seed(1000)
train=sample(1:5000,3000)
## 3000 rassal sayiyi gorme
train
getOption("max.print") = 10000
options("max.print") = 10000
options(max.print= 10000)
## 3000 rassal sayiyi gorme
train
clc
clean all
rm(list=ls())
hr=read.csv("C://Users//Mustafa Oguz Turkkan//Downloads//HR.csv")
str(hr)
summary(hr)
set.seed(580)
hrTrain=sample(1:14999,104999)
hrTrain=sample(1:14999,10499)
hrTrain
hrTrain=hr[hrTrain,]
hrTest=hr[-hrTrain,]
rm(list=ls())
hr=read.csv("C://Users//Mustafa Oguz Turkkan//Downloads//HR.csv")
set.seed(580)
train=sample(1:14999,10499)
hrTrain=hr[train,]
hrTest=hr[-train,]
hrTestTree=tree(left~.,data=hrTest)
install.packages(tree)
install.packages("tree)
install.packages("tree")
install.packages("tree")
library(tree)
hrTestTree=tree(left~.,data=hrTest)
View(hrTestTree)
View(hrTestTree)
plot(hrTestTree)
hrTestTree
text(hrTestTree)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=2,mindev=0.0)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=10,mindev=0.0)
plot(hrTestTree_v1)
text(hrTestTree_v1)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=2,mindev=0.0)
hrTestTree_v1
summary(hrTestTree_v1)
hrTrainTree=tree(left~.,data=hrTrain)
hrTrainTree_v1=tree(left~.,data=hrTrain,minsize=2,mindev=0.0)
summary(hrTrainTree_v1)
predTest=predict(hrTestTree,hr)
predTest
summary(predTest)
predTest=predict(hrTestTree)
summary(predTest)
table(hrTestTree$left,predTest)
predTest=predict(hrTestTree,type="class")
predTest=predict(hrTestTree,type="regression")
predTest=predict(hrTestTree,type="tree")
table(hrTestTree$left,predTest)
predTest
length(predTest)
View(predTest)
View(predTest)
length(hrTestTree$left)
str(hrTestTree)
## Example 2 Regression
library(MASS)
str(Boston)
?Boston
trBos=tree(medv~.,data=Boston)
trBos
sum((Boston$medv-mean(Boston$medv))^2)
summary(trBos)
plot(trBos)
text(trBos,cex=0.8)
text(trBos,cex=1.0)
text(trBos,cex=0.8)
predTest=predict(hr,newdata=hrTestTree)
predTest=predict(hr,newdata=hrTestTree, type="tree")
library(tree)
predTest=predict(hr,newdata=hrTestTree, type="tree")
predTest=predict(hrTree,newdata=hrTestTree, type="tree")
hrTree=tree(left~.,data=hr)
predTest=predict(hrTree,newdata=hrTestTree, type="tree")
predTest=predict(hrTree,newdata=hrTestTree)
predTest=predict(hrTree,newdata=hrTest)
table(hrTest$left,predTest)
table(hrTest$left,predTest,type="tree")
table(hrTest$left,predTest,type="tree")
table(hrTest$left,predTest,type="")
table(hrTest$left,predTest)
plot(trBos)
text(trBos,cex=0.8)
medvhat=predict(trBos)
medvhat
sum((Boston$medv-medvhat)^2)
trBos2=tree(medv~.,data=Boston,minsize=2,mindev=0)
trBos2
summary(trBos2)
plot(trBos2)
text(trBos2,pretty=0)
## Regression Tree with training and test sets
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
trainBos=Boston[train,]
tree.boston=tree(medv~.,data=trainBos)
## tree.boston=tree(medv~.,data=Boston,subset=train)
summary(tree.boston)
tree.boston
plot(tree.boston)
text(tree.boston,pretty=0)
yhat=predict(tree.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
plot_ly(filtered_odd1s, x = ~timestamp, y = ~matchId, z = ~odd, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Time'),
yaxis = list(title = 'Match ID'),
zaxis = list(title = 'Odd')))
install.packages('car')
library('car')
install.packages('data.table')
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('plotly')
library(plotly)
install.packages("data.table")
install.packages("data.table")
getwd()
setwd("C:/Users/Mustafa Oguz Turkkan/Documents/GitHub/etm01-Delicioussaw)
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
odds=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds')
install.packages('car')
library('car')
install.packages('data.table')
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('plotly')
library(plotly)
install.packages("data.table")
install.packages("data.table")
getwd()
index = sample(1:nrow(filtered_odd1s), 1, replace = FALSE)
install.packages('car')
library('car')
install.packages('data.table')
install.packages("data.table")
require(data.table)
install.packages('data.table')
install.packages("data.table")
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('plotly')
install.packages("plotly")
library(plotly)
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
getwd()
setwd("C:/Users/Mustafa Oguz Turkkan/Documents/GitHub/etm01-Delicioussaw")
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
odds=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds')
filtered_odd=odds[betType=='1x2'& bookmaker=='1xBet']
filtered_odd[,totalhandicap:=NULL]
filtered_odd[,timestamp:=as_datetime(date,tz='Turkey')]
filtered_odd=filtered_odd[order(matchId,oddtype,timestamp)]
filtered_odd1s=filtered_odd[oddtype=='odd1']
filtered_odd2s=filtered_odd[oddtype=='odd2']
filtered_oddXs=filtered_odd[oddtype=='oddX']
#delete oddtype, bookmaker, betType, date columns from all 3 tables since we filtered them already
filtered_odd1s[,c('oddtype','bookmaker','betType','date')]=list(NULL)
filtered_odd2s[,c('oddtype','bookmaker','betType','date')]=list(NULL)
filtered_oddXs[,c('oddtype','bookmaker','betType','date')]=list(NULL)
View(filtered_odd1s)
odds_1x2_final=odds_1x2[,list(final_odd=odd[.N]),
by=list(matchId,oddtype,bookmaker)]
odds1_initial=filtered_odd1s[,list(start_odd=odd[1]),
by=list(matchId,oddtype,bookmaker)]
odds1_initial=filtered_odd1s[,list(start_odd=odd[1]),
by=list(matchId)]
View(odds1_initial)
odds1_final=filtered_odd1s[,list(final_odd=odd[.N]),
by=list(matchId)]
View(odds1_final)
odds1_difference=filtered_odd1s[,list(difference=odds1_final$final_odd-odds1_initial$start_odd),
by=list(matchId)]
View(odds1_difference)
odds1_difference=filtered_odd1s[,list(difference=odds1_final[,1]-odds1_initial[,1]),
by=list(matchId)]
odds1_difference=filtered_odd1s[,list(difference=odds1_final[1,1]-odds1_initial[1,1]),
by=list(matchId)]
odds1_difference=filtered_odd1s[,list(difference=odds1_final[1,2]-odds1_initial[1,2]),
by=list(matchId)]
odds1_difference=filtered_odd1s[,list(difference=odds1_final[,2]-odds1_initial[,2]),
by=list(matchId)]
odds1_difference=filtered_odd1s[,list(difference=odds1_final[2]-odds1_initial[2]),
by=list(matchId)]
odds1_final[1,2]
odds1_final[,2]
odds1_final[2]
odds1_difference=filtered_odd1s[,list(difference=odds1_final[,2]-odds1_initial[,2]),
by=list(matchId)]
list(start_odd=odd[1]
View(odds1_initial)
View(filtered_odd1s)
odds1_difference=odds1_final[,list(final_odd), by=list(matchId)] - odds1_initial[,list(start_odd), by=list(matchId)]
odds1_final[,list(final_odd), by=list(matchId)]
odds1_difference=odds1_final[,list(difference=final_odd), by=list(matchId)] -
odds1_initial[,list(difference=start_odd), by=list(matchId)]
odds1_difference$difference=odds1_final$final_odd - odds1_initial$start_odd
View(odds1_difference)
View(odds1_difference)
odds1_difference1$difference=odds1_final$final_odd - odds1_initial$start_odd
odds1_diff=filtered_odd1s[,list(diff_odd=0),
by=list(matchId)]
View(odds1_difference)
View(odds1_diff)
odds1_diff$diff_odd=odds1_final$final_odd - odds1_initial$start_odd
View(odds1_diff)
scatterplot(odds1_diff)
scatterplot(odds1_diff$matchId,odds1_diff$diff_odd)
install.packages('ggplot')
library(ggplot)
install.packages('ggplot2')
install.packages("ggplot2")
library(ggplot2)
ggplot(aes(x='Match', y='Odd Difference'), data=odds1_diff) +\
geom_line() +\
stat_smooth(colour='blue', span=0.2)
ggplot(aes(x='Match', y='Odd Difference'), data=odds1_diff) +\
geom_line() +\
stat_smooth(colour='blue', span=0.2)
ggplot(aes(x='Match', y='Odd Difference'), data=odds1_diff) +\ geom_line() +\ stat_smooth(colour='blue', span=0.2)
ggplot(aes(x='Match', y='Odd Difference'), data=odds1_diff) %>% geom_line() %>% stat_smooth(colour='blue', span=0.2)
ggplot(aes(x='Match', y='Odd Difference'), data=odds1_diff) + geom_line() + stat_smooth(colour='blue', span=0.2)
ggplot(aes(x='matchId', y='diff_odd'), data=odds1_diff) + geom_line() + stat_smooth(colour='blue', span=0.2)
ggplot(aes(matchId, diff_odd), data=odds1_diff) + geom_line() + stat_smooth(colour='blue', span=0.2)
ggplot(aes(matchId, diff_odd), data=odds1_diff) + stat_smooth(colour='blue', span=0.2)
plot(odds1_diff)
plot(odds1_diff$matchId,odss1_diff$diff_odd)
plot(odds1_diff$matchId,odds1_diff$diff_odd)
plot([1:nrow(odds1_diff)],odds1_diff$diff_odd)
plot((1:nrow(odds1_diff)),odds1_diff$diff_odd)
abline(lm(y ~ x, data = odds1_diff), col = "blue")
abline(lm(odds1_diff$diff_odd ~ (1:nrow(odds1_diff), data = odds1_diff), col = "blue")
abline(lm(odds1_diff$diff_odd ~ (1:nrow(odds1_diff)), data = odds1_diff), col = "blue")
plot(x,y)
x <- (1:nrow(odds1_diff))
y <- odds1_diff$diff_odd
plot(x,y)
abline(y ~ x, data = odds1_diff, col = "blue")
scatterplot(y ~ x)
scatterplot(y ~ x | x >0)
scatterplot(y ~ x | x <0)
scatterplot(y ~ x | y <0)
scatterplot(y ~ x | y >0)
scatterplot(y1 ~ x1 | y1 <0)
x1 <- (1:nrow(odds1_diff))
y1 <- odds1_diff$diff_odd
scatterplot(y1 ~ x1 | y1 <0)
scatterplot(y1 ~ x1 | cyl)
scatterplot(y1 ~ x1)
x <- (1:nrow(odds1_diff))
y <- odds1_diff$diff_odd
scatterplot(y ~ x)
odds2_initial=filtered_odd2s[,list(start_odd=odd[1]),
by=list(matchId)]
odds2_final=filtered_odd2s[,list(final_odd=odd[.N]),
by=list(matchId)]
odds2_diff=filtered_odd2s[,list(diff_odd=0),
by=list(matchId)]
odds2_diff$diff_odd=odds2_final$final_odd - odds2_initial$start_odd
x2 <- (1:nrow(odds2_diff))
y2 <- odds2_diff$diff_odd
scatterplot(y ~ x)
scatterplot(y2 ~ x2)
oddsX_initial=filtered_oddXs[,list(start_odd=odd[1]),
by=list(matchId)]
oddsX_final=filtered_oddXs[,list(final_odd=odd[.N]),
by=list(matchId)]
oddsX_diff=filtered_oddXs[,list(diff_odd=0),
by=list(matchId)]
oddsX_diff$diff_odd=oddsX_final$final_odd - oddsX_initial$start_odd
xX <- (1:nrow(oddsX_diff))
yX <- oddsX_diff$diff_odd
scatterplot(yX ~ xX)
install.packages("rmarkdown",repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
filtered_odd=odds[betType=='1x2'& bookmaker=='1xBet']
#delete totalhandicap column
filtered_odd[,totalhandicap:=NULL]
filtered_odd=odds[betType=='1x2'& bookmaker=='1xBet']
View(filtered_odd)
install.packages('data.table')
install.packages("data.table")
