pred_ir = predict(iris)
iris_tr=tree(Species~.,data=iris)
##Classification and Regression Trees with "tree" package
install.packages("tree")
library(tree)
## Example 1 (Classification)
iris_tr=tree(Species~Petal.Length+Sepal.Width,data=iris)
iris_tr=tree(Species~.,data=iris)
plot(iris_tr)
text(iris_tr,cex=0.8)
summary(iris_tr)
iris_tr
pred_ir=predict(iris_tr)
pred_ir
getwd()
setwd("C://Users//Mustafa Oguz Turkkan//Documents")
## Example 3 Classification
## reading from a file
bank=read.csv("UniversalBank.csv")
## Example 3 Classification
## reading from a file
bank=read.csv("UniversalBank.csv")
str(bank)
bt=tree(Personal.Loan~.,data=bank)
plot(bt)
text(bt,cex=0.8)
bt
## Changing the output attribute to a categorical attribute
bank$Personal.Loan=as.factor(bank$Personal.Loan)
str(bank)
## levels = 0 or 1 to levels = rejected or accepted
levels(bank$Personal.Loan)=c("rejected",'accepted')
## back to the original
levels(bank$Personal.Loan)=c('0','1')
str(bank)
## Obtaining training ve test sets, Method 1
set.seed(1000)
train=sample(1:5000,3000)
## 3000 rassal sayiyi gorme
train
getOption("max.print") = 10000
options("max.print") = 10000
options(max.print= 10000)
## 3000 rassal sayiyi gorme
train
clc
clean all
rm(list=ls())
hr=read.csv("C://Users//Mustafa Oguz Turkkan//Downloads//HR.csv")
str(hr)
summary(hr)
set.seed(580)
hrTrain=sample(1:14999,104999)
hrTrain=sample(1:14999,10499)
hrTrain
hrTrain=hr[hrTrain,]
hrTest=hr[-hrTrain,]
rm(list=ls())
hr=read.csv("C://Users//Mustafa Oguz Turkkan//Downloads//HR.csv")
set.seed(580)
train=sample(1:14999,10499)
hrTrain=hr[train,]
hrTest=hr[-train,]
hrTestTree=tree(left~.,data=hrTest)
install.packages(tree)
install.packages("tree)
install.packages("tree")
install.packages("tree")
library(tree)
hrTestTree=tree(left~.,data=hrTest)
View(hrTestTree)
View(hrTestTree)
plot(hrTestTree)
hrTestTree
text(hrTestTree)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=2,mindev=0.0)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=10,mindev=0.0)
plot(hrTestTree_v1)
text(hrTestTree_v1)
hrTestTree_v1=tree(left~.,data=hrTest,minsize=2,mindev=0.0)
hrTestTree_v1
summary(hrTestTree_v1)
hrTrainTree=tree(left~.,data=hrTrain)
hrTrainTree_v1=tree(left~.,data=hrTrain,minsize=2,mindev=0.0)
summary(hrTrainTree_v1)
predTest=predict(hrTestTree,hr)
predTest
summary(predTest)
predTest=predict(hrTestTree)
summary(predTest)
table(hrTestTree$left,predTest)
predTest=predict(hrTestTree,type="class")
predTest=predict(hrTestTree,type="regression")
predTest=predict(hrTestTree,type="tree")
table(hrTestTree$left,predTest)
predTest
length(predTest)
View(predTest)
View(predTest)
length(hrTestTree$left)
str(hrTestTree)
## Example 2 Regression
library(MASS)
str(Boston)
?Boston
trBos=tree(medv~.,data=Boston)
trBos
sum((Boston$medv-mean(Boston$medv))^2)
summary(trBos)
plot(trBos)
text(trBos,cex=0.8)
text(trBos,cex=1.0)
text(trBos,cex=0.8)
predTest=predict(hr,newdata=hrTestTree)
predTest=predict(hr,newdata=hrTestTree, type="tree")
library(tree)
predTest=predict(hr,newdata=hrTestTree, type="tree")
predTest=predict(hrTree,newdata=hrTestTree, type="tree")
hrTree=tree(left~.,data=hr)
predTest=predict(hrTree,newdata=hrTestTree, type="tree")
predTest=predict(hrTree,newdata=hrTestTree)
predTest=predict(hrTree,newdata=hrTest)
table(hrTest$left,predTest)
table(hrTest$left,predTest,type="tree")
table(hrTest$left,predTest,type="tree")
table(hrTest$left,predTest,type="")
table(hrTest$left,predTest)
plot(trBos)
text(trBos,cex=0.8)
medvhat=predict(trBos)
medvhat
sum((Boston$medv-medvhat)^2)
trBos2=tree(medv~.,data=Boston,minsize=2,mindev=0)
trBos2
summary(trBos2)
plot(trBos2)
text(trBos2,pretty=0)
## Regression Tree with training and test sets
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
trainBos=Boston[train,]
tree.boston=tree(medv~.,data=trainBos)
## tree.boston=tree(medv~.,data=Boston,subset=train)
summary(tree.boston)
tree.boston
plot(tree.boston)
text(tree.boston,pretty=0)
yhat=predict(tree.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
plot_ly(filtered_odd1s, x = ~timestamp, y = ~matchId, z = ~odd, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Time'),
yaxis = list(title = 'Match ID'),
zaxis = list(title = 'Odd')))
install.packages('car')
library('car')
install.packages('data.table')
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('plotly')
library(plotly)
install.packages("data.table")
install.packages("data.table")
getwd()
setwd("C:/Users/Mustafa Oguz Turkkan/Documents/GitHub/etm01-Delicioussaw)
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
]
filtered_oddXs=filtered_odd[oddtype=='oddX']
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
odds=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds')
install.packages('car')
library('car')
install.packages('data.table')
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('plotly')
library(plotly)
install.packages("data.table")
install.packages("data.table")
getwd()
unlink('GitHub/etm01-Delicioussaw/HW_1_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_complete_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_complete_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_final_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_final_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_v1_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_v2_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_v2_cache', recursive = TRUE)
#HW1 - Task 1
install.packages('data.table')
require(data.table)
install.packages('lubridate')
require(lubridate)
install.packages('car')
library('car')
#read matches info
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
odds=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds')
#Filter odds for over&under bet type and a total handicap of 2.5
ou_odds_all=odds[betType=='ou'& totalhandicap=='2.5']
#Change all the time values to meaningful values
ou_odds_all[,timestamp:=as_datetime(date,tz='Turkey')]
#Order all the odds
ou_odds_all=ou_odds_all[order(matchId,oddtype,timestamp)]
#Get the latest odds
latest_ou_odds=ou_odds_all[,list(last_odd=odd[.N]),list(matchId,oddtype,bookmaker)]
#Filter odds for 5 different bookmakers
latest_ou_odds_bet365=latest_ou_odds[bookmaker=='bet365']
latest_ou_odds_1xBet=latest_ou_odds[bookmaker=='1xBet']
latest_ou_odds_Betclic=latest_ou_odds[bookmaker=='Betclic']
latest_ou_odds_BetVictor=latest_ou_odds[bookmaker=='BetVictor']
latest_ou_odds_Betway=latest_ou_odds[bookmaker=='Betway']
#We adjust the matches data too for showing the total number of goals
matches[,c('score_home','score_away'):=tstrsplit(score,':')]
matches[,score_home:=as.numeric(score_home)]
matches[,score_away:=as.numeric(score_away)]
matches$sum_score=rowSums(cbind(matches$score_home,matches$score_away))
#Normalize data. Change the odd values to probabilities. We are taking
#the last odd into account here.
#### bet365 ####
wide_ou_odds=dcast(latest_ou_odds_bet365,matchId~oddtype,value.var='last_odd')
wide_ou_odds$result=rowSums(cbind(wide_ou_odds$over,wide_ou_odds$under))
wide_ou_odds$over_prob=wide_ou_odds$over/wide_ou_odds$result
wide_ou_odds$under_prob=wide_ou_odds$under/wide_ou_odds$result
ou_odds_results=merge(wide_ou_odds,matches[,list(matchId,sum_score)],by=c('matchId'),all.x=TRUE)
ou_odds_results[,score:=ifelse(sum_score>2.5,'over','under')]
ou_bucket=c(5:15)/15
ou_odds_results[,discrete_over:=cut(over_prob,ou_bucket)]
summary_ou_buckets_over=ou_odds_results[,list(overwins=sum(score=='over',na.rm=TRUE),.N),by=list(discrete_over)]#gerçekte over ile bitenler toplanır, value aralıklarına göre pivot alınır
summary_ou_buckets_over[,ratio_over:=overwins/N]
summary_ou_buckets_over=summary_ou_buckets_over[order(discrete_over)]
summary_over=ou_odds_results[,list(avg_over_prob=mean(over_prob,na.rm=TRUE),.N),by=list(discrete_over)]
scatterplot(summary_over$avg_over_prob,summary_ou_buckets_over$ratio_over,
xlab="Average probability of overs in a bin", ylab="Actual overs ratio in a bin",
main="Bet365")
abline(coef=c(0,1))
#### 1xBet ####
wide_ou_odds=dcast(latest_ou_odds_1xBet,matchId~oddtype,value.var='last_odd')
wide_ou_odds$result=rowSums(cbind(wide_ou_odds$over,wide_ou_odds$under))
wide_ou_odds$over_prob=wide_ou_odds$over/wide_ou_odds$result
wide_ou_odds$under_prob=wide_ou_odds$under/wide_ou_odds$result
ou_odds_results=merge(wide_ou_odds,matches[,list(matchId,sum_score)],by=c('matchId'),all.x=TRUE)
ou_odds_results[,score:=ifelse(sum_score>2.5,'over','under')]
ou_odds_results[,discrete_over:=cut(over_prob,ou_bucket)]
summary_ou_buckets_over=ou_odds_results[,list(overwins=sum(score=='over',na.rm=TRUE),.N),by=list(discrete_over)]#gerçekte over ile bitenler toplanır, value aralıklarına göre pivot alınır
summary_ou_buckets_over[,ratio_over:=overwins/N]
summary_ou_buckets_over=summary_ou_buckets_over[order(discrete_over)]
summary_over=ou_odds_results[,list(avg_over_prob=mean(over_prob,na.rm=TRUE),.N),by=list(discrete_over)]
scatterplot(summary_over$avg_over_prob,summary_ou_buckets_over$ratio_over,
xlab="Average probability of overs in a bin", ylab="Actual overs ratio in a bin",
main="1xBet")
abline(coef=c(0,1))
### Betclic ####
wide_ou_odds=dcast(latest_ou_odds_Betclic,matchId~oddtype,value.var='last_odd')
wide_ou_odds$result=rowSums(cbind(wide_ou_odds$over,wide_ou_odds$under))
wide_ou_odds$over_prob=wide_ou_odds$over/wide_ou_odds$result
wide_ou_odds$under_prob=wide_ou_odds$under/wide_ou_odds$result
ou_odds_results=merge(wide_ou_odds,matches[,list(matchId,sum_score)],by=c('matchId'),all.x=TRUE)
ou_odds_results[,score:=ifelse(sum_score>2.5,'over','under')]
ou_odds_results[,discrete_over:=cut(over_prob,ou_bucket)]
summary_ou_buckets_over=ou_odds_results[,list(overwins=sum(score=='over',na.rm=TRUE),.N),by=list(discrete_over)]#gerçekte over ile bitenler toplanır, value aralıklarına göre pivot alınır
summary_ou_buckets_over[,ratio_over:=overwins/N]
summary_ou_buckets_over=summary_ou_buckets_over[order(discrete_over)]
summary_over=ou_odds_results[,list(avg_over_prob=mean(over_prob,na.rm=TRUE),.N),by=list(discrete_over)]
scatterplot(summary_over$avg_over_prob,summary_ou_buckets_over$ratio_over,
xlab="Average probability of overs in a bin", ylab="Actual overs ratio in a bin",
main="Betclic")
abline(coef=c(0,1))
### BetVictor ####
wide_ou_odds=dcast(latest_ou_odds_BetVictor,matchId~oddtype,value.var='last_odd')
wide_ou_odds$result=rowSums(cbind(wide_ou_odds$over,wide_ou_odds$under))
wide_ou_odds$over_prob=wide_ou_odds$over/wide_ou_odds$result
wide_ou_odds$under_prob=wide_ou_odds$under/wide_ou_odds$result
ou_odds_results=merge(wide_ou_odds,matches[,list(matchId,sum_score)],by=c('matchId'),all.x=TRUE)
ou_odds_results[,score:=ifelse(sum_score>2.5,'over','under')]
ou_odds_results[,discrete_over:=cut(over_prob,ou_bucket)]
summary_ou_buckets_over=ou_odds_results[,list(overwins=sum(score=='over',na.rm=TRUE),.N),by=list(discrete_over)]#gerçekte over ile bitenler toplanır, value aralıklarına göre pivot alınır
summary_ou_buckets_over[,ratio_over:=overwins/N]
summary_ou_buckets_over=summary_ou_buckets_over[order(discrete_over)]
summary_over=ou_odds_results[,list(avg_over_prob=mean(over_prob,na.rm=TRUE),.N),by=list(discrete_over)]
scatterplot(summary_over$avg_over_prob,summary_ou_buckets_over$ratio_over,
xlab="Average probability of overs in a bin", ylab="Actual overs ratio in a bin",
main="BetVictor")
abline(coef=c(0,1))
### Betway ####
wide_ou_odds=dcast(latest_ou_odds_Betway,matchId~oddtype,value.var='last_odd')
wide_ou_odds$result=rowSums(cbind(wide_ou_odds$over,wide_ou_odds$under))
wide_ou_odds$over_prob=wide_ou_odds$over/wide_ou_odds$result
wide_ou_odds$under_prob=wide_ou_odds$under/wide_ou_odds$result
ou_odds_results=merge(wide_ou_odds,matches[,list(matchId,sum_score)],by=c('matchId'),all.x=TRUE)
ou_odds_results[,score:=ifelse(sum_score>2.5,'over','under')]
ou_odds_results[,discrete_over:=cut(over_prob,ou_bucket)]
summary_ou_buckets_over=ou_odds_results[,list(overwins=sum(score=='over',na.rm=TRUE),.N),by=list(discrete_over)]#gerçekte over ile bitenler toplanır, value aralıklarına göre pivot alınır
summary_ou_buckets_over[,ratio_over:=overwins/N]
summary_ou_buckets_over=summary_ou_buckets_over[order(discrete_over)]
summary_over=ou_odds_results[,list(avg_over_prob=mean(over_prob,na.rm=TRUE),.N),by=list(discrete_over)]
scatterplot(summary_over$avg_over_prob,summary_ou_buckets_over$ratio_over,
xlab="Average probability of overs in a bin", ylab="Actual overs ratio in a bin",
main="Betway")
abline(coef=c(0,1))
#1-b - Selected bookmaker: Betway
annual=merge(wide_ou_odds,matches[,list(matchId,sum_score,date)],by=c('matchId'),all.x=TRUE)
annual[,score:=ifelse(sum_score>2.5,'over','under')]
annual[,timestamp:=as_datetime(date,tz='Turkey')]
annual[,discrete_over:=cut(over_prob,ou_bucket)]
annual=annual[sum_score<2.5,over_under:=0]
annual=annual[sum_score>2.5,over_under:=1]
annual_pivot=annual[,list(odd_avg=mean(over_prob,na.rm=T),real_avg=mean(over_under,na.rm = T),count=.N),by=list(year(timestamp),discrete_over)]
annual_pivot=annual_pivot[order(year)]
annual_pivot2=annual_pivot[discrete_over=='(0.4,0.45]']
x=annual_pivot2$year
y1=annual_pivot2$odd_avg
y2=annual_pivot2$real_avg
plot(x,y1,type="l",col="red",ylim=c(0.42,0.7))
par(new=TRUE)
plot(x,y2,type="l",col="green",ylim=c(0.42,0.7))
unlink('GitHub/etm01-Delicioussaw/HW_1_v3_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_v3_cache', recursive = TRUE)
unlink('GitHub/etm01-Delicioussaw/HW_1_v4_cache', recursive = TRUE)
install.packages(c("shiny","tidyverse","data.table","shinydashboard","rhandsontable","sp","mapproj"))
library(data.table)
.libPaths()
require(data.table)
require(lubridate)
library(randomForest)
install.packages("tree")
library(tree)
install.packages("MASS")
require(MASS)
#read data for matches and odds
setwd("C:/Users/Mustafa Oguz Turkkan/Documents/GitHub/etm01-Delicioussaw")
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
odds=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_odd_details.rds')
source('performance_metrics.r')
#split home and away scores
matches[,c('score_home','score_away'):=tstrsplit(score,':')]
matches[,score_home:=as.numeric(score_home)]
matches[,score_away:=as.numeric(score_away)]
#Define a new column called result for holding match result
matches$result="None"
matches[score_home>score_away,result:="Home"]
matches[score_home==score_away,result:="Tie"]
matches[score_home<score_away,result:="Away"]
#delete unnecessary columns
matches[,c('leagueId','type','score')]=list(NULL)
#normalize time
matches[,timestamp:=as_datetime(date,tz='Turkey')]
matches[,c('date')]=list(NULL)
#### adjusting odd data ####
#get only 1x2 betTypes, hta=Home, Tie, Away
hta_odds=odds[betType == "1x2"]
#get rid of unnecessary totalhandicap column
hta_odds[,c("totalhandicap")]=list(NULL)
#normalize time for odds data
hta_odds[,timestamp:=as_datetime(date,tz='Turkey')]
hta_odds[,c('date')]=list(NULL)
#Order all the odds
hta_odds=hta_odds[order(matchId,oddtype,timestamp)]
#Get the latest odds
latest_hta_odds=hta_odds[,list(last_odd=odd[.N]),list(matchId,oddtype,bookmaker)]
#write odds data as wide based on oddtype
latest_hta_odds=dcast(latest_hta_odds,matchId+bookmaker~oddtype,value.var='last_odd')
#change the odd data to probabilities
latest_hta_odds$result=rowSums(cbind(latest_hta_odds$odd1,latest_hta_odds$odd2,latest_hta_odds$oddX))
latest_hta_odds$odd1_prob=latest_hta_odds$odd1/latest_hta_odds$result
latest_hta_odds$odd2_prob=latest_hta_odds$odd2/latest_hta_odds$result
latest_hta_odds$oddX_prob=latest_hta_odds$oddX/latest_hta_odds$result
pivot_hta_odds=latest_hta_odds[,list(odd1_prob=mean(odd1_prob),odd2_prob=mean(odd2_prob),oddX_prob=mean(oddX_prob)),by=list(matchId)]
#merge odd probabilities with matches data
matches_wth_odd=merge(matches,pivot_hta_odds,by=c('matchId'),all.x=TRUE)
#take the last season's matches out as the test data
test=matches_wth_odd[matches_wth_odd$timestamp>=as.Date("2018-06-30")]
test[,c('timestamp','matchId')]=list(NULL)
#exclude last season from all matches to obtain training data
training=matches_wth_odd[matches_wth_odd$timestamp<as.Date("2018-06-30")]
training[,c('timestamp','matchId')]=list(NULL)
#### Random Forest prediction by using odd data ####
training$result=as.factor(training$result)
ranFor=randomForest(result~.,data=training[,c('result','odd1_prob','odd2_prob','oddX_prob')], na.action=na.roughfix)
pred=predict(ranFor,newdata=test)
table(test$result,pred)
pred_prob=predict(ranFor,newdata = test, type='prob')
#### adjusting data for rps calculation ####
#outcomes matrix as Away, Home and Tie represented by 1s
outcomes=matrix(0,nrow=nrow(pred_prob),ncol=3)
for(e in 1:nrow(pred_prob)){
if(test$result[e]=='Away'){
outcomes[e,1]=1
}else if(test$result[e]=='Home'){
outcomes[e,2]=1
}else{
outcomes[e,3]=1
}
}
# RPS for random forest prediction
rps=RPS_matrix(pred_prob,outcomes)
100*mean(rps)
plot(ranFor, type="l", main='Random Forest Prediction Result')
#### prediction by using ordinal regression ####
#create the same training and test datas for ordinal regression model
tr_ordinal <- training
test_ordinal <- test
#change probability values into factor levels
#5 factor levels as v.low,low,medium,high,v.high
#levels will be assigned to probabilities in 0-1 with equivalent weight
tr_ordinal = tr_ordinal[,odd1_prob:=ifelse(odd1_prob<0.2,"v.low",
ifelse(odd1_prob<0.4,"low",
ifelse(odd1_prob<0.6,"medium",
ifelse(odd1_prob<0.8,"high","v.high"))))]
tr_ordinal = tr_ordinal[,odd2_prob:=ifelse(odd2_prob<0.2,"v.low",
ifelse(odd2_prob<0.4,"low",
ifelse(odd2_prob<0.6,"medium",
ifelse(odd2_prob<0.8,"high","v.high"))))]
tr_ordinal = tr_ordinal[,oddX_prob:=ifelse(oddX_prob<0.2,"v.low",
ifelse(oddX_prob<0.4,"low",
ifelse(oddX_prob<0.6,"medium",
ifelse(oddX_prob<0.8,"high","v.high"))))]
#the same procedure applies to test data
test_ordinal = test_ordinal[,odd1_prob:=ifelse(odd1_prob<0.2,"v.low",
ifelse(odd1_prob<0.4,"low",
ifelse(odd1_prob<0.6,"medium",
ifelse(odd1_prob<0.8,"high","v.high"))))]
test_ordinal = test_ordinal[,odd2_prob:=ifelse(odd2_prob<0.2,"v.low",
ifelse(odd2_prob<0.4,"low",
ifelse(odd2_prob<0.6,"medium",
ifelse(odd2_prob<0.8,"high","v.high"))))]
test_ordinal = test_ordinal[,oddX_prob:=ifelse(oddX_prob<0.2,"v.low",
ifelse(oddX_prob<0.4,"low",
ifelse(oddX_prob<0.6,"medium",
ifelse(oddX_prob<0.8,"high","v.high"))))]
#ordinal logistic regression model
polrMod <- polr(result ~ odd1_prob + odd2_prob + oddX_prob, data=tr_ordinal)
summary(polrMod)
#prediction by OLR
pred_OLR=predict(polrMod,test_ordinal)
table(test_ordinal$result,pred_OLR)
pred_OLR_probs=predict(polrMod,test_ordinal,type="prob")
#rps for OLR
rps_OLR=RPS_matrix(pred_OLR_probs,outcomes)
100*mean(rps_OLR)
